A faire :

afficher un prompt sur minishell KO

avoir un historique KO

trouver les bons fichiers executables (comme pipex je crois) KO

n'utiliser qu'une variable globale si besoin pour un signal KO

prendre en compte ' (pareil qu'en dessous mais prend en compte $) KO

prendre en compte " (empeche le shell d'interpreter les meta characters sauf $) KO

prendre en compte < (redirige l'input) KO

prendre en compte > (redirige l'output) KO

prendre en compte << (sert a delimiter jusqu'ou on lit, pas besoin de mettre a jour l'historique) KO

prendre en compte >> (redirige output en append mode) KO

prendre en compte | (pipes) KO

prendre en compte $ (variables d'environnement) KO

prendre en compte $? (which should expand to the exit
status of the most recently executed
foreground pipeline (j'ai pas trop compris)) KO

prendre en compte ctrl-C (afficher un nouveau prompt) KO

prendre en compte ctrl-D (quitter shell) KO

prendre en compte ctrl-\ (jokes on you c'est pas a faire) OK

prendre en compte les commandes suivantes :

echo avec option -n (affiche un message (sans saut de ligne avec -n)) KO

cd avec soit un chemin relatif ou absolu (change le dossier) KO

pwd sans options (affiche le chemin du dossier actuel) KO

export sans options (ajoute une variable aux variables d'environnement) KO

unset sans options (inversement de export, unset va desactiver les variables environnements) KO

env sans options (cree un environnement "virtuel" ou affiche juste les variables d'environnements) KO

exit sans options (quitte Shell) KO



Pas a faire :

\ et ; ne sont pas a prendre en compte

prendre en compte les leaks de readline
(je crois qu'il y a des trucs pour se faciliter la tache)



Bonus (on verra parce que je pense qu'on sera plus a ca pres)

prendre en compte && et || en plus des parentheses pour les priorites
(ET et OU, si une commande reussit on fait la deuxieme dans le
premier cas et l'inverse dans le deuxieme) KO

prendre en compte * (donc tout ce qu'il y a dans le dossier correspondant) KO
